// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// Enums
// --------------------
enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// --------------------
// Core
// --------------------
model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  passwordHash   String
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  enrollments    Enrollment[]
  userWorkouts   UserWorkout[]    // completed sessions
}

model Program {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  difficulty     String?
  durationWeeks  Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  days           ProgramDay[]
  enrollments    Enrollment[]
}

model ProgramDay {
  id             Int              @id @default(autoincrement())
  programId      Int
  dayNumber      Int
  title          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  program        Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  workouts       Workout[]        // planned workouts (exercise prescriptions)
  userWorkouts   UserWorkout[]    // completed sessions linked to this day

  @@unique([programId, dayNumber]) // one record per day per program
}

// --------------------
// Content library
// --------------------
model Exercise {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  equipment      String?          // e.g., "dumbbells", "bodyweight"
  targetMuscles  String?          // simple CSV; switch to JSON if needed
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  workouts       Workout[]        // where this exercise is prescribed
  exerciseLogs   UserExerciseLog[]
}

// "Workout" = planned prescription for a ProgramDay exercise
model Workout {
  id             Int              @id @default(autoincrement())
  programDayId   Int
  exerciseId     Int

  // prescription
  sets           Int?
  reps           Int?
  durationSecs   Int?             // for timed movements
  restSecs       Int?
  tempo          String?          // e.g., "3-1-3"
  orderIndex     Int              // position within the day

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  programDay     ProgramDay       @relation(fields: [programDayId], references: [id], onDelete: Cascade)
  exercise       Exercise         @relation(fields: [exerciseId], references: [id])

  @@unique([programDayId, orderIndex]) // unique ordering per day
  @@index([exerciseId])
}

// --------------------
// Enrollment & Progress
// --------------------
model Enrollment {
  id             Int              @id @default(autoincrement())
  userId         Int
  programId      Int
  status         EnrollmentStatus @default(ACTIVE)
  startDate      DateTime         @default(now())
  currentDay     Int              @default(1)
  completedAt    DateTime?

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  program        Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  userWorkouts   UserWorkout[]    // sessions completed under this enrollment

  @@index([userId, programId])
}

// A user's completed session for a specific ProgramDay (under an Enrollment)
model UserWorkout {
  id             Int              @id @default(autoincrement())
  userId         Int
  enrollmentId   Int
  programDayId   Int
  completedAt    DateTime         @default(now())
  durationSecs   Int?
  calories       Int?
  notes          String?

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment     Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  programDay     ProgramDay       @relation(fields: [programDayId], references: [id])
  exerciseLogs   UserExerciseLog[]
   
  @@index([userId])
  @@index([enrollmentId, programDayId])
}

// Per-exercise performance inside a UserWorkout session
model UserExerciseLog {
  id             Int              @id @default(autoincrement())
  userWorkoutId  Int
  exerciseId     Int

  // what the user actually did
  setsCompleted  Int?
  repsPerSet     Int?
  durationSecs   Int?
  weightKg       Float?
  notes          String?
  createdAt      DateTime         @default(now())

  userWorkout    UserWorkout      @relation(fields: [userWorkoutId], references: [id], onDelete: Cascade)
  exercise       Exercise         @relation(fields: [exerciseId], references: [id])

  @@index([userWorkoutId])
  @@index([exerciseId])
}
